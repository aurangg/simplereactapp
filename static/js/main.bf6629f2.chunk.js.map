{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","this","getSpanClasses","props","totalCounters","style","fontSize","Component","Counter","_this","id","getSpanButtonClasses","counter","value","onClick","onIncrement","getIncreaseButton","onDelete","getDeleteButton","itemName","spanclasses","classes","Counters","onReset","resetBtn","counters","map","src_components_counter","key","App","state","handleIncrement","countervalue","obj3","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","obj2","c","handleDelete","counterid","checkToPrint","obj","filter","Fragment","navbar","length","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAuBeA,0LAnBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,SACS,IACPH,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,KAAKC,kBACnBD,KAAKE,MAAMC,eAEdP,EAAAC,EAAAC,cAAA,QAAMM,MAAO,CAAEC,SAAU,KAAzB,8DAQN,MAFkB,sCAfDC,cCoDNC,0LAlDJ,IAAAC,EAAAR,KACP,OACEJ,EAAAC,EAAAC,cAAA,OAAKW,GAAG,UACNb,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,KAAKU,wBAAxB,OAEEd,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,KAAKC,kBACnBD,KAAKE,MAAMS,QAAQC,QAGxBhB,EAAAC,EAAAC,cAAA,UACEe,QAAS,kBAAML,EAAKN,MAAMY,YAAYN,EAAKN,MAAMS,UACjDZ,UAAWC,KAAKe,qBAFlB,OAMAnB,EAAAC,EAAAC,cAAA,UACEW,GAAG,MACHI,QAAS,kBAAML,EAAKN,MAAMc,SAASR,EAAKN,MAAMS,QAAQF,KACtDV,UAAWC,KAAKiB,mBAHlB,UAOArB,EAAAC,EAAAC,cAAA,YAAOE,KAAKE,MAAMS,QAAQO,qDAO9B,MADa,iEAMb,MADgB,+DAKhB,IAAIC,EAAc,+BAElB,OADAA,GAA4C,IAA7BnB,KAAKE,MAAMS,QAAQC,MAAc,UAAY,uDAK5D,IAAIQ,EAAU,eAEd,OADAA,GAAwC,IAA7BpB,KAAKE,MAAMS,QAAQC,MAAc,SAAW,iBA9CrCN,cCyBPe,mLAxBJ,IAAAb,EAAAR,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQe,QAASb,KAAKE,MAAMoB,QAASvB,UAAWC,KAAKuB,YAArD,cAGCvB,KAAKE,MAAMsB,SAASC,IAAI,SAAAd,GAAO,OAC9Bf,EAAAC,EAAAC,cAAC4B,EAAD,CACEC,IAAKhB,EAAQF,GACbO,SAAUR,EAAKN,MAAMc,SACrBF,YAAaN,EAAKN,MAAMY,YACxBH,QAASA,0CASjB,MADe,qCApBIL,aC8DRsB,6MA5DbC,MAAQ,CACNL,SAAU,CACR,CAAEf,GAAI,EAAGG,MAAO,EAAGM,SAAU,WAC7B,CAAET,GAAI,EAAGG,MAAO,EAAGM,SAAU,gBAC7B,CAAET,GAAI,EAAGG,MAAO,EAAGM,SAAU,kBAC7B,CAAET,GAAI,EAAGG,MAAO,EAAGM,SAAU,2BAIjCY,gBAAkB,SAAAC,GAChB,IAAMC,EAAIC,OAAAC,EAAA,EAAAD,CAAOzB,EAAKqB,MAAML,UACtBW,EAAQH,EAAKI,QAAQL,GAC3BC,EAAKG,GAALF,OAAAI,EAAA,EAAAJ,CAAA,GAAmBF,GACnBC,EAAKG,GAAOvB,QACZJ,EAAK8B,SAAS,CAAEd,SAAUQ,OAG5BO,YAAc,WACZ,IAAMC,EAAOhC,EAAKqB,MAAML,SAASC,IAAI,SAAAgB,GAEnC,OADAA,EAAE7B,MAAQ,EACH6B,IAETjC,EAAK8B,SAAS,CAAEd,SAAUgB,OAG5BE,aAAe,SAAAC,GACb,IAAMR,EAAQ3B,EAAKqB,MAAML,SAAS,GAClC,GAAImB,IAAcR,EAAM1B,GACtB,OAAOD,EAAKoC,cAAa,GAE3B,IAAMC,EAAMrC,EAAKqB,MAAML,SAASsB,OAAO,SAAAL,GAAC,OAAIA,EAAEhC,KAAOkC,IACrDnC,EAAK8B,SAAS,CAAEd,SAAUqB,6EAI1B,OACEjD,EAAAC,EAAAC,cAACF,EAAAC,EAAMkD,SAAP,KACEnD,EAAAC,EAAAC,cAACkD,EAAD,CACE7C,cAAeH,KAAK6B,MAAML,SAASsB,OAAO,SAAAL,GAAC,OAAIA,EAAE7B,MAAQ,IAAGqC,SAE9DrD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAAC0B,EAAD,CACEA,SAAUxB,KAAK6B,MAAML,SACrBF,QAAStB,KAAKuC,YACdzB,YAAad,KAAK8B,gBAClBd,SAAUhB,KAAK0C,eAEjB9C,EAAAC,EAAAC,cAAA,gDAEFF,EAAAC,EAAAC,cAAA,WAAME,KAAK4C,wDAKf,IAA0B,IAAtB5C,KAAK4C,aACP,OAAOhD,EAAAC,EAAAC,cAAA,gCAxDKoD,IAAM5C,WCQJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf6629f2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <div className=\"navbar-brand\">\r\n          Navbar{\" \"}\r\n          <span className={this.getSpanClasses()}>\r\n            {this.props.totalCounters}\r\n          </span>\r\n          <span style={{ fontSize: 13 }}>Selected Phones</span>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n  getSpanClasses() {\r\n    let spanclasses = \"badge badge-pill ml-2 badge-\";\r\n\r\n    return spanclasses;\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./counter.css\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"cssdiv\">\r\n        <button className={this.getSpanButtonClasses()}>\r\n          Cart\r\n          <span className={this.getSpanClasses()}>\r\n            {this.props.counter.value}\r\n          </span>\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className={this.getIncreaseButton()}\r\n        >\r\n          Add\r\n        </button>\r\n        <button\r\n          id=\"del\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className={this.getDeleteButton()}\r\n        >\r\n          Delete\r\n        </button>\r\n        <span>{this.props.counter.itemName}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getDeleteButton() {\r\n    let delbtn = \"btn m-2 btn-danger\";\r\n    return delbtn;\r\n  }\r\n\r\n  getIncreaseButton() {\r\n    let incbutton = \"btn m-2 btn-success\";\r\n    return incbutton;\r\n  }\r\n\r\n  getSpanClasses() {\r\n    let spanclasses = \"badge badge-pill ml-2 badge-\";\r\n    spanclasses += this.props.counter.value === 0 ? \"warning\" : \"light\";\r\n    return spanclasses;\r\n  }\r\n\r\n  getSpanButtonClasses() {\r\n    let classes = \"btn m-2 btn-\";\r\n    classes += this.props.counter.value === 0 ? \"danger\" : \"primary\";\r\n    return classes;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.props.onReset} className={this.resetBtn()}>\r\n          Reset Cart\r\n        </button>\r\n        {this.props.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  resetBtn() {\r\n    const rstbtn = \"btn btn-outline-primary m-2\";\r\n    return rstbtn;\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nclass App extends React.Component {\n  state = {\n    counters: [\n      { id: 1, value: 0, itemName: \"iPhones\" },\n      { id: 2, value: 0, itemName: \"Google Pixel\" },\n      { id: 3, value: 0, itemName: \"Huawei P30 Pro\" },\n      { id: 4, value: 0, itemName: \"Samsung Galaxy S10+\" }\n    ]\n  };\n\n  handleIncrement = countervalue => {\n    const obj3 = [...this.state.counters]; //cloning counters array and storing it obj3\n    const index = obj3.indexOf(countervalue); //collecting index no of countervalue and storing it in index\n    obj3[index] = { ...countervalue }; //I dont know what happened here\n    obj3[index].value++; //Increment\n    this.setState({ counters: obj3 });\n  };\n\n  handleReset = () => {\n    const obj2 = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters: obj2 });\n  };\n\n  handleDelete = counterid => {\n    const index = this.state.counters[0];\n    if (counterid === index.id) {\n      return this.checkToPrint(true);\n    } // Delete before this to add iPhones too\n    const obj = this.state.counters.filter(c => c.id !== counterid);\n    this.setState({ counters: obj });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n          <span>I wont let you delete iPhone ;)</span>\n        </main>\n        <div>{this.checkToPrint()}</div>\n      </React.Fragment>\n    );\n  }\n  checkToPrint() {\n    if (this.checkToPrint === true) {\n      return <h1>iPhones win</h1>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}